@page "/";
@using SocialMediaProfile.BlazorServer.Data.Interfaces;
@using System.Net.Http.Headers;
@using SocialMediaProfile.Core.Models.DTOs;
@using SocialMediaProfile.Core.Models.DTOs.ResponseDTOs;
@inject IGlobalWebService GlobalWebService;
@inject IAuthWebService AuthWebService;
@inject IUserWebService UserWebService;
@inject IHttpClientFactory HttpClientFactory;

<PageTitle>SocialMedia</PageTitle>

@if (!GlobalWebService.IsReady)
{
    <section class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
        <article class="row">
            <div class="col">
                <p class="text-white">Cargando...</p>
            </div>
        </article>
    </section>
}
else
{
    <section class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
        <article class="row">
            <div class="col">
                @foreach (var alias in Alias)
                {
                    <a href="/@(alias.Alias)">@(alias.Alias)</a>
                }
                <AuthorizeView>
                    <Authorized>
                        This content is displayed only if the user is Authorized
                    </Authorized>
                    <NotAuthorized>
                        This content is displayed if the user is Not Authorized
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </article>
    </section>
}

@code {

    private List<UserAliasResponseDTO> Alias = new List<UserAliasResponseDTO>();

    //public IUserWebService UserWebService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (GlobalWebService.HttpClient is null)
        {
            GlobalWebService.HttpClient = HttpClientFactory.CreateClient("WebApi");          
        }

        Alias = await UserWebService.GetAllAliasAsync();

        GlobalWebService.IsReady = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await AuthWebService.GetJwtAsync();

            if (!string.IsNullOrEmpty(token))
            {
                GlobalWebService.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                var userId = AuthWebService.GetUserId(token);
                GlobalWebService.UserId = userId;                   
            }            
        }
    }
}
