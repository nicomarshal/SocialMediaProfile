@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject ISkillWebService SkillWebService;

<EditForm Model="_skillDTO" OnValidSubmit="() => AddSkill(_skillDTO)">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <section class="modal fade" id="addSkill" tabindex="-1" aria-labelledby="addSkillLabel" aria-hidden="true">
        <article class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white p-2">
                <div class="modal-header border-0 m-3 mb-2 p-0 position-relative" data-bs-theme="dark">
                    <h4 class="modal-title w-100 pb-2" id="addSkillLabel" style="font-size: 1.60rem; border-bottom: 0.1875rem solid #1B5DC2;">Agregar Tecnologìa</h4>
                    <button type="button" class="btn-close position-absolute top-0 end-0" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ResetModel()"></button>
                </div>
                <div class="modal-body" style="font-size: 1.15rem;">
                    <div class="form-group pb-3">
                        <label for="skillName" class="pb-1">Skill</label>
                        <InputText id="skillName" class="form-control" @bind-Value="_skillDTO.Name" />
                        <ValidationMessage For="() => _skillDTO.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label for="image" class="pb-1">Logo</label>
                        <InputText id="image" class="form-control" @bind-Value="_skillDTO.Name" />
                        <ValidationMessage For="() => _skillDTO.Name"></ValidationMessage>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="submit" class="btn text-white" style="background: #1B5DC2;" data-bs-dismiss="modal">Agregar</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ResetModel()">Cancelar</button>
                </div>
            </div>
        </article>
    </section>
</EditForm>

@code {
    [Parameter]
    public string Alias { get; set; }
    [Parameter]
    public EventCallback<List<SkillDTO>> OnClick { get; set; }

    private SkillDTO _skillDTO = new SkillDTO();

    private async Task AddSkill(SkillDTO skillDTO)
    {
        try
        {
            var result = await SkillWebService.AddAsync(skillDTO);
            var isCreated = result.IsOk;

            if (!isCreated)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La tecnologìa no pudo ser cargada.");
                return;
            }

            await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La tecnologìa fue cargada con éxito.");

            var skillsList = await SkillWebService.GetAllByAliasAsync(Alias);
            await OnClick.InvokeAsync(skillsList);

            await ResetModel();
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    private async Task ResetModel()
    {
        _skillDTO.Name = string.Empty;
        _skillDTO.Percentage = 0;
        await Task.CompletedTask;
    }
}