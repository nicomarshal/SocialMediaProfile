@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject ISkillWebService SkillWebService;

@if (_skillDTO is not null)
{
    <EditForm Model="_skillDTO" OnValidSubmit="() => UpdateSkill(_skillDTO)">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <section class="modal fade" id="editSkill" tabindex="-1" aria-labelledby="editSkillLabel" aria-hidden="true">
            <article class="modal-dialog modal-dialog-centered">
                <div class="modal-content bg-dark text-white">
                    <div class="modal-header" data-bs-theme="dark">
                        <h1 class="modal-title fs-5" id="editSkillLabel">Editar Tecnologìa</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ResetModel()"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="skillName">Skill</label>
                            <InputText id="skillName" class="form-control" @bind-Value="_skillDTO.Name" />
                            <ValidationMessage For="() => _skillDTO.Name"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="percentage">Percentage</label>
                            <InputNumber id="percentage" class="form-control" @bind-Value="_skillDTO.Percentage" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Editar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ResetModel()">Cancelar</button>
                    </div>
                </div>
            </article>
        </section>
    </EditForm>
}

@code {
    [Parameter]
    public string Alias { get; set; }
    [Parameter]
    public EventCallback<List<SkillDTO>> OnClick { get; set; }

    private SkillDTO _skillDTO { get; set; }
    private SkillDTO _cloneSkillDTO { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _skillDTO = new SkillDTO();
        _cloneSkillDTO = new SkillDTO();
        await Task.CompletedTask;
    }

    private async Task UpdateSkill(SkillDTO skillDTO)
    {
        try
        {
            var result = await SkillWebService.UpdateAsync(skillDTO);
            var isEdited = result.IsOk;

            if (!isEdited)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La tecnologìa no pudo ser actualizada.");
                return;
            }

            await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La tecnologìa fue actualizada con éxito.");

            var skillsList = await SkillWebService.GetAllByAliasAsync(Alias);
            await OnClick.InvokeAsync(skillsList);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public async Task GetSkillSelected(SkillDTO skillDTO)
    {
        //Hago una copia de la instancia de SkillDTO en una nueva instancia de SkillDTO
        //Esta copia tendrà una referencia llamada _cloneSkillDTO.
        await CloneModel(skillDTO);

        //Agrego una nueva referencia llamada _skillDTO a la instancia del objeto SkillDTO
        //Cualquier modificaciòn en _skillDTO, tambièn se reflejarà en skillDTO, ya que este ùltimo tambièn
        //es una referencia a la instancia del objeto SkillDTO.
        _skillDTO.Id = skillDTO.Id;
        _skillDTO.Name = skillDTO.Name;
        _skillDTO.Percentage = skillDTO.Percentage;
        _skillDTO.UserId = skillDTO.UserId;
    }

    private async Task ResetModel()
    {
        //Si modifico los campos, pero luego le doy click a Cancel o a Close,
        //restauro los valores de la instancia de SkillDTO a travès de la
        //referencia _skillDTO.
        //Todas las referencias a esta instancia tambièn seràn restauradas, por ej: skillDTO.
        _skillDTO.Id = _cloneSkillDTO.Id;
        _skillDTO.Name = _cloneSkillDTO.Name;
        _skillDTO.Percentage = _cloneSkillDTO.Percentage;
        _skillDTO.UserId = _cloneSkillDTO.UserId;

        await Task.CompletedTask;
    }

    private async Task CloneModel(SkillDTO skillDTO)
    {
        _cloneSkillDTO.Id = skillDTO.Id;
        _cloneSkillDTO.Name = skillDTO.Name;
        _cloneSkillDTO.Percentage = skillDTO.Percentage;
        _cloneSkillDTO.UserId = skillDTO.UserId;

        await Task.CompletedTask;
    }
}
