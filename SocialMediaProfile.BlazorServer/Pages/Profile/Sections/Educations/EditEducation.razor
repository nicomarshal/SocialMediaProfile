@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IEducationWebService EducationWebService;

@if (_educationDTO is not null)
{
    <EditForm Model="_educationDTO" OnValidSubmit="() => UpdateEducation(_educationDTO)">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <section class="modal fade" id="editEducation" tabindex="-1" aria-labelledby="editEducationLabel" aria-hidden="true">
            <article class="modal-dialog modal-dialog-centered">
                <div class="modal-content bg-dark text-white">
                    <div class="modal-header" data-bs-theme="dark">
                        <h1 class="modal-title fs-5" id="editEducationLabel">Editar Educación</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ResetModel()"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="instituteName">Institute</label>
                            <InputText id="instituteName" class="form-control" @bind-Value="_educationDTO.Name" />
                            <ValidationMessage For="() => _educationDTO.Name"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="career">Career</label>
                            <InputText id="career" class="form-control" @bind-Value="_educationDTO.Career" />
                            <ValidationMessage For="() => _educationDTO.Career"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="startDate">Start Date</label>
                            <InputDate id="startDate" class="form-control" @bind-Value="_educationDTO.StartDate" />
                            <ValidationMessage For="() => _educationDTO.StartDate"></ValidationMessage>

                            <label for="finshDate">Finish Date</label>
                            <InputDate id="finshDate" class="form-control" @bind-Value="_educationDTO.FinishDate" />
                        </div>
                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="_educationDTO.Description" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Editar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ResetModel()">Cancelar</button>
                    </div>
                </div>
            </article>
        </section>
    </EditForm>
}

@code {
    [Parameter]
    public string Alias { get; set; }
    [Parameter]
    public EventCallback<List<EducationDTO>> OnClick { get; set; }

    private EducationDTO _educationDTO { get; set; }
    private EducationDTO _cloneEducationDTO { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _educationDTO = new EducationDTO();
        _cloneEducationDTO = new EducationDTO();
        await Task.CompletedTask;
    }

    private async Task UpdateEducation(EducationDTO educationDTO)
    {
        try
        {
            var result = await EducationWebService.UpdateAsync(educationDTO);
            var isEdited = result.IsOk;

            if (!isEdited)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - El estudio académico no pudo ser actualizado.");
                return;
            }

            await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - El estudio académico fue actualizado con éxito.");

            var educationsList = await EducationWebService.GetAllInDescOrderAsync(Alias);
            await OnClick.InvokeAsync(educationsList);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public async Task GetEducationSelected(EducationDTO educationDTO)
    {
        //Hago una copia de la instancia de EducationDTO en una nueva instancia de EducationDTO
        //Esta copia tendrà una referencia llamada _cloneEducationDTO.
        await CloneModel(educationDTO);

        //Agrego una nueva referencia llamada _educationDTO a la instancia del objeto EducationDTO
        //Cualquier modificaciòn en _educationDTO, tambièn se reflejarà en educationDTO, ya que este ùltimo tambièn
        //es una referencia a la instancia del objeto EducationDTO.
        _educationDTO.Id = educationDTO.Id;
        _educationDTO.Logo = educationDTO.Logo;
        _educationDTO.Name = educationDTO.Name;
        _educationDTO.Career = educationDTO.Career;
        _educationDTO.StartDate = educationDTO.StartDate;
        _educationDTO.FinishDate = educationDTO.FinishDate;
        _educationDTO.Description = educationDTO.Description;
        _educationDTO.UserId = educationDTO.UserId;
    }

    private async Task ResetModel()
    {
        //Si modifico los campos, pero luego le doy click a Cancel o a Close,
        //restauro los valores de la instancia de EducationDTO a travès de la
        //referencia _educationDTO.
        //Todas las referencias a esta instancia tambièn seràn restauradas, por ej: educationDTO.
        _educationDTO.Id = _cloneEducationDTO.Id;
        _educationDTO.Logo = _cloneEducationDTO.Logo;
        _educationDTO.Name = _cloneEducationDTO.Name;
        _educationDTO.Career = _cloneEducationDTO.Career;
        _educationDTO.StartDate = _cloneEducationDTO.StartDate;
        _educationDTO.FinishDate = _cloneEducationDTO.FinishDate;
        _educationDTO.Description = _cloneEducationDTO.Description;
        _educationDTO.UserId = _cloneEducationDTO.UserId;

        await Task.CompletedTask;
    }

    private async Task CloneModel(EducationDTO educationDTO)
    {
        _cloneEducationDTO.Id = educationDTO.Id;
        _cloneEducationDTO.Logo = educationDTO.Logo;
        _cloneEducationDTO.Name = educationDTO.Name;
        _cloneEducationDTO.Career = educationDTO.Career;
        _cloneEducationDTO.StartDate = educationDTO.StartDate;
        _cloneEducationDTO.FinishDate = educationDTO.FinishDate;
        _cloneEducationDTO.Description = educationDTO.Description;
        _cloneEducationDTO.UserId = educationDTO.UserId;

        await Task.CompletedTask;
    }
}
