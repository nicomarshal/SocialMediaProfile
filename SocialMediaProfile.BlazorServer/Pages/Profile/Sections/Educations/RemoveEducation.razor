@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IEducationWebService EducationWebService;

<section class="modal fade" id="removeEducation" tabindex="-1" aria-labelledby="removeEducationLabel" aria-hidden="true">
    <article class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white p-2">
            <div class="modal-header border-0 m-3 mb-2 p-0 position-relative" data-bs-theme="dark">
                <h4 class="modal-title w-100 pb-2" id="removeEducationLabel" style="font-size: 1.60rem; border-bottom: 0.1875rem solid #1B5DC2;">Eliminar Educación</h4>
                <button type="button" class="btn-close position-absolute top-0 end-0" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="font-size: 1.15rem;">
                ¿Estás seguro?
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn text-white" style="background: #1B5DC2;" data-bs-dismiss="modal" @onclick="() => DeleteEducation(_educationId)">Eliminar</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </article>
</section>

@code {
    [Parameter]
    public string Alias { get; set; }
    [Parameter]
    public EventCallback<List<EducationDTO>> OnClick { get; set; }

    private int _educationId { get; set; }

    private async Task DeleteEducation(int id)
    {
        try
        {
            var result = await EducationWebService.DeleteAsync(id);
            var isDeleted = result.IsOk;

            if (!isDeleted)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - El estudio académico no pudo ser eliminado.");
                return;
            }

            await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - El estudio académico fue eliminado con éxito.");

            var educationsList = await EducationWebService.GetAllInDescOrderAsync(Alias);
            await OnClick.InvokeAsync(educationsList);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public async Task GetEducationSelected(int educationId)
    {
        _educationId = educationId;
        await Task.CompletedTask;
    }
}

