@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IExperienceWebService ExperienceWebService;

<EditForm Model="_experienceDTO" OnValidSubmit="() => AddExperience(_experienceDTO)">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <section class="modal fade" id="addExperience" tabindex="-1" aria-labelledby="addExperienceLabel" aria-hidden="true">
        <article class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white p-2">
                <div class="modal-header border-0 m-3 mb-2 p-0 position-relative" data-bs-theme="dark">
                    <h4 class="modal-title w-100 pb-2" id="addExperienceLabel" style="font-size: 1.60rem; border-bottom: 0.1875rem solid #1B5DC2;">Agregar Experiencia</h4>
                    <button type="button" class="btn-close position-absolute top-0 end-0" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ResetModel()"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group pb-3">
                        <label for="companyName" class="pb-1">Empresa</label>
                        <InputText id="companyName" class="form-control" @bind-Value="_experienceDTO.Name" />
                        <ValidationMessage For="() => _experienceDTO.Name"></ValidationMessage>
                    </div>
                    <div class="form-group pb-3">
                        <label for="job" class="pb-1">Puesto</label>
                        <InputText id="job" class="form-control" @bind-Value="_experienceDTO.Job" />
                        <ValidationMessage For="() => _experienceDTO.Job"></ValidationMessage>
                    </div>
                    <div class="form-group pb-3">
                        <label for="startDate" class="pb-1">Fecha de Ingreso</label>
                        <InputDate id="startDate" class="form-control" @bind-Value="_experienceDTO.StartDate" />
                        <ValidationMessage For="() => _experienceDTO.StartDate"></ValidationMessage>
                    </div>
                    <div class="form-group pb-3">
                        <label for="finshDate" class="pb-1">Fecha de Egreso</label>
                        <InputDate id="finshDate" class="form-control" @bind-Value="_experienceDTO.FinishDate" />
                    </div>
                    <div class="form-group">
                        <label for="description" class="pb-1">Descripción</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="_experienceDTO.Description" />
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="submit" class="btn text-white" style="background: #1B5DC2;"  data-bs-dismiss="modal">Agregar</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ResetModel()">Cancelar</button>
                </div>
            </div>
        </article>
    </section>
</EditForm>

@code {
    [Parameter]
    public string Alias { get; set; }
    [Parameter]
    public EventCallback<List<ExperienceDTO>> OnClick { get; set; }

    private ExperienceDTO _experienceDTO = new ExperienceDTO();

    private async Task AddExperience(ExperienceDTO experienceDTO)
    {
        try
        {
            var result = await ExperienceWebService.AddAsync(experienceDTO);
            var isCreated = result.IsOk;

            if (!isCreated)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La experiencia laboral no pudo ser cargada.");
                return;
            }

            await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La experiencia laboral fue cargada con éxito.");

            var experiencesList = await ExperienceWebService.GetAllInDescOrderAsync(Alias);
            await OnClick.InvokeAsync(experiencesList);

            await ResetModel();
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    private async Task ResetModel()
    {
        _experienceDTO.Name = string.Empty;
        _experienceDTO.Job = string.Empty;
        _experienceDTO.StartDate = DateTime.Now;
        _experienceDTO.FinishDate = DateTime.Now;
        _experienceDTO.Description = string.Empty;

        await Task.CompletedTask;
    }
}