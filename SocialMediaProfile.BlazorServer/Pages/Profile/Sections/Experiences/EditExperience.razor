@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IExperienceWebService ExperienceWebService;

@if (_experienceDTO is not null)
{
    <EditForm Model="_experienceDTO" OnValidSubmit="() => UpdateExperience(_experienceDTO)">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <section class="modal fade" id="editExperience" tabindex="-1" aria-labelledby="editExperienceLabel" aria-hidden="true">
            <article class="modal-dialog modal-dialog-centered">
                <div class="modal-content bg-dark text-white">
                    <div class="modal-header" data-bs-theme="dark">
                        <h1 class="modal-title fs-5" id="editExperienceLabel">Editar Experiencia</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ResetModel()"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="companyName">Company</label>
                            <InputText id="companyName" class="form-control" @bind-Value="_experienceDTO.Name" />
                            <ValidationMessage For="() => _experienceDTO.Name"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="job">Job</label>
                            <InputText id="job" class="form-control" @bind-Value="_experienceDTO.Job" />
                            <ValidationMessage For="() => _experienceDTO.Job"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="startDate">Start Date</label>
                            <InputDate id="startDate" class="form-control" @bind-Value="_experienceDTO.StartDate" />
                            <ValidationMessage For="() => _experienceDTO.StartDate"></ValidationMessage>

                            <label for="finshDate">Finish Date</label>
                            <InputDate id="finshDate" class="form-control" @bind-Value="_experienceDTO.FinishDate" />
                        </div>
                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="_experienceDTO.Description" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Editar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ResetModel()">Cancelar</button>
                    </div>
                </div>
            </article>
        </section>
    </EditForm>
}

@code {
    [Parameter]
    public string Alias { get; set; }
    [Parameter]
    public EventCallback<List<ExperienceDTO>> OnClick { get; set; }

    private ExperienceDTO _experienceDTO { get; set; }
    private ExperienceDTO _cloneExperienceDTO { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _cloneExperienceDTO = new ExperienceDTO();
        await Task.CompletedTask;
    }

    private async Task UpdateExperience(ExperienceDTO experienceDTO)
    {
        try
        {
            var result = await ExperienceWebService.UpdateAsync(experienceDTO);
            var isEdited = result.IsOk;

            if (!isEdited)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La experiencia laboral no pudo ser actualizada.");
                return;
            }

            await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La experiencia laboral fue actualizada con éxito.");

            var experiencesList = await ExperienceWebService.GetAllInDescOrderAsync(Alias);
            await OnClick.InvokeAsync(experiencesList);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public async Task GetExperienceSelected(ExperienceDTO experienceDTO)
    {
        //Hago una copia de la instancia de ExperienceDTO en una nueva instancia de ExperienceDTO
        //Esta copia tendrà una referencia llamada _cloneExperienceDTO.
        await CloneModel(experienceDTO);

        //Agrego una nueva referencia llamada _experienceDTO a la instancia del objeto ExperienceDTO
        //Cualquier modificaciòn en _experienceDTO, tambièn se reflejarà en experienceDTO, ya que este ùltimo tambièn 
        //es una referencia a la instancia del objeto ExperienceDTO.
        _experienceDTO = experienceDTO;
    }

    private async Task ResetModel()
    {
        //Si modifico los campos, pero luego le doy click a Cancel o a Close,
        //restauro los valores de la instancia de ExperienceDTO a travès de la
        //referencia _experienceDTO.
        //Todas las referencias a esta instancia tambièn seràn restauradas, por ej: experienceDTO.
        _experienceDTO.Id = _cloneExperienceDTO.Id;
        _experienceDTO.Logo = _cloneExperienceDTO.Logo;
        _experienceDTO.Name = _cloneExperienceDTO.Name;
        _experienceDTO.Job = _cloneExperienceDTO.Job;
        _experienceDTO.StartDate = _cloneExperienceDTO.StartDate;
        _experienceDTO.FinishDate = _cloneExperienceDTO.FinishDate;
        _experienceDTO.Description = _cloneExperienceDTO.Description;
        _experienceDTO.UserId = _cloneExperienceDTO.UserId;

        await Task.CompletedTask;
    }

    private async Task CloneModel(ExperienceDTO experienceDTO)
    {
        _cloneExperienceDTO.Id = experienceDTO.Id;
        _cloneExperienceDTO.Logo = experienceDTO.Logo;
        _cloneExperienceDTO.Name = experienceDTO.Name;
        _cloneExperienceDTO.Job = experienceDTO.Job;
        _cloneExperienceDTO.StartDate = experienceDTO.StartDate;
        _cloneExperienceDTO.FinishDate = experienceDTO.FinishDate;
        _cloneExperienceDTO.Description = experienceDTO.Description;
        _cloneExperienceDTO.UserId = experienceDTO.UserId;

        await Task.CompletedTask;
    }
}
