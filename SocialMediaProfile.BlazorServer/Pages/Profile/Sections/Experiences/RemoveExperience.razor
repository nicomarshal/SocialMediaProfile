@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IExperienceWebService ExperienceWebService;

<section class="modal fade" id="removeExperience" tabindex="-1" aria-labelledby="removeExperienceLabel" aria-hidden="true">
    <article class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header" data-bs-theme="dark">
                <h1 class="modal-title fs-5" id="removeExperienceLabel">Eliminar Experiencia</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                ¿Estás seguro?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => DeleteExperience(_experienceId)">Eliminar</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </article>
</section>

@code {
    [Parameter]
    public string Alias { get; set; }
    [Parameter]
    public EventCallback<List<ExperienceDTO>> OnClick { get; set; }

    private int _experienceId { get; set; }

    private async Task DeleteExperience(int id)
    {
        try
        {
            var result = await ExperienceWebService.DeleteAsync(id);
            var isDeleted = result.IsOk;

            if (!isDeleted)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La experiencia laboral no pudo ser eliminada.");
                return;
            }

            await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - La experiencia laboral fue eliminada con éxito.");

            var experiencesList = await ExperienceWebService.GetAllInDescOrderAsync(Alias);
            await OnClick.InvokeAsync(experiencesList);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public async Task GetExperienceSelected(int experienceId)
    {
        _experienceId = experienceId;
        await Task.CompletedTask;
    }
}

