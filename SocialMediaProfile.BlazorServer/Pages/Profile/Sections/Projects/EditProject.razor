@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IProjectWebService ProjectWebService;

@if (_projectDTO is not null)
{
    <EditForm Model="_projectDTO" OnValidSubmit="() => UpdateProject(_projectDTO)">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <section class="modal fade" id="editProject" tabindex="-1" aria-labelledby="editProjectLabel" aria-hidden="true">
            <article class="modal-dialog modal-dialog-centered">
                <div class="modal-content bg-dark text-white p-2">
                    <div class="modal-header border-0 m-3 mb-2 p-0 position-relative" data-bs-theme="dark">
                        <h4 class="modal-title w-100 pb-2" id="editProjectLabel" style="font-size: 1.60rem; border-bottom: 0.1875rem solid #1B5DC2;">Editar Proyecto</h4>
                        <button type="button" class="btn-close position-absolute top-0 end-0" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ResetModel()"></button>
                    </div>
                    <div class="modal-body" style="font-size: 1.15rem;">
                        <div class="form-group pb-3">
                            <label for="projectName" class="pb-1">Proyecto</label>
                            <InputText id="projectName" class="form-control" @bind-Value="_projectDTO.Name" />
                            <ValidationMessage For="() => _projectDTO.Name"></ValidationMessage>
                        </div>
                        <div class="form-group pb-3">
                            <label for="images" class="pb-1">Imágenes</label>
                            <InputText id="images" class="form-control" @bind-Value="_projectDTO.Images" />
                        </div>
                        <div class="form-group pb-3">
                            <label for="url" class="pb-1">Repositorio</label>
                            <InputText id="url" class="form-control" @bind-Value="_projectDTO.URL" />
                        </div>
                        <div class="form-group pb-3">
                            <label for="startDate" class="pb-1">Fecha de Ingreso</label>
                            <InputDate id="startDate" class="form-control" @bind-Value="_projectDTO.StartDate" />
                            <ValidationMessage For="() => _projectDTO.StartDate"></ValidationMessage>
                        </div>
                        <div class="form-group pb-3">
                            <label for="finshDate" class="pb-1">Fecha de Egreso</label>
                            <InputDate id="finshDate" class="form-control" @bind-Value="_projectDTO.FinishDate" />
                        </div>
                        <div class="form-group">
                            <label for="description" class="pb-1">Descripción</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="_projectDTO.Description" />
                        </div>
                    </div>
                    <div class="modal-footer border-0">
                        <button type="submit" class="btn text-white" style="background: #1B5DC2;" data-bs-dismiss="modal">Editar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ResetModel()">Cancelar</button>
                    </div>
                </div>
            </article>
        </section>
    </EditForm>
}

@code {
    [Parameter]
    public string Alias { get; set; }
    [Parameter]
    public EventCallback<List<ProjectDTO>> OnClick { get; set; }

    private ProjectDTO _projectDTO { get; set; }
    private ProjectDTO _cloneProjectDTO { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _projectDTO = new ProjectDTO();
        _cloneProjectDTO = new ProjectDTO();
        await Task.CompletedTask;
    }

    private async Task UpdateProject(ProjectDTO projectDTO)
    {
        try
        {
            var result = await ProjectWebService.UpdateAsync(projectDTO);
            var isEdited = result.IsOk;

            if (!isEdited)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - El proyecto no pudo ser actualizado.");
                return;
            }

            await JSRuntime.InvokeVoidAsync("alert", $"{result.StatusCode} - El proyecto fue actualizado con éxito.");

            var projectsList = await ProjectWebService.GetAllInDescOrderAsync(Alias);
            await OnClick.InvokeAsync(projectsList);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public async Task GetProjectSelected(ProjectDTO projectDTO)
    {
        //Hago una copia de la instancia de ProjectDTO en una nueva instancia de ProjectDTO
        //Esta copia tendrà una referencia llamada _cloneProjectDTO.
        await CloneModel(projectDTO);

        //Agrego una nueva referencia llamada _projectDTO a la instancia del objeto ProjectDTO
        //Cualquier modificaciòn en _projectDTO, tambièn se reflejarà en projectDTO, ya que este ùltimo tambièn
        //es una referencia a la instancia del objeto ProjectDTO.
        _projectDTO.Id = projectDTO.Id;
        _projectDTO.Name = projectDTO.Name;
        _projectDTO.StartDate = projectDTO.StartDate;
        _projectDTO.FinishDate = projectDTO.FinishDate;
        _projectDTO.Description = projectDTO.Description;
        _projectDTO.Images = projectDTO.Images;
        _projectDTO.URL = projectDTO.URL;
        _projectDTO.UserId = projectDTO.UserId;
    }

    private async Task ResetModel()
    {
        //Si modifico los campos, pero luego le doy click a Cancel o a Close,
        //restauro los valores de la instancia de ProjectDTO a travès de la
        //referencia _projectDTO.
        //Todas las referencias a esta instancia tambièn seràn restauradas, por ej: projectDTO.
        _projectDTO.Id = _cloneProjectDTO.Id;
        _projectDTO.Name = _cloneProjectDTO.Name;
        _projectDTO.StartDate = _cloneProjectDTO.StartDate;
        _projectDTO.FinishDate = _cloneProjectDTO.FinishDate;
        _projectDTO.Description = _cloneProjectDTO.Description;
        _projectDTO.Images = _cloneProjectDTO.Images;
        _projectDTO.URL = _cloneProjectDTO.URL;
        _projectDTO.UserId = _cloneProjectDTO.UserId;

        await Task.CompletedTask;
    }

    private async Task CloneModel(ProjectDTO projectDTO)
    {
        _cloneProjectDTO.Id = projectDTO.Id;
        _cloneProjectDTO.Name = projectDTO.Name;
        _cloneProjectDTO.StartDate = projectDTO.StartDate;
        _cloneProjectDTO.FinishDate = projectDTO.FinishDate;
        _cloneProjectDTO.Description = projectDTO.Description;
        _cloneProjectDTO.Images = projectDTO.Images;
        _cloneProjectDTO.URL = projectDTO.URL;
        _cloneProjectDTO.UserId = projectDTO.UserId;

        await Task.CompletedTask;
    }
}
