@page "/login";
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject UserAuthenticationStateProvider AuthStateProvider;

<section class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <EditForm Model="_loginDTO" OnValidSubmit="SubmitLogin">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="_loginDTO.Email" />
            <ValidationMessage For="() => _loginDTO.Email"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="password">Contraseña</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="_loginDTO.Password" />
            <ValidationMessage For="() => _loginDTO.Password"></ValidationMessage>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
</section>

@code {
    private LoginDTO _loginDTO = new LoginDTO();

    private async Task SubmitLogin()
    {
        try
        {
            var result = await AuthStateProvider.LoginAsync(_loginDTO);
            var isLoggedIn = result.Item1;
            var statusCode = result.Item2;

            if (!isLoggedIn)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{statusCode} - Las credenciales ingresadas son incorrectas.");
                return;
            }

            await JSRuntime.InvokeVoidAsync("alert", $"{statusCode} - Inicio de sesión exitoso.");
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

}